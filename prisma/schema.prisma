generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["nativeTypes"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id                String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String                  @unique
  description       String
  active            Boolean                 @default(true)
  telegram          String?
  discord           String?
  email             String?
  payoutAddress     String?
  payoutCurrency    PayoutCurrency          @default(BTC)
  payInPlatform     Boolean                 @default(false)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @default(now())
  members           GroupMembership[]
  groupSubscription GroupSubscription?
}

model GroupMembership {
  id            String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  memberId      String              @db.Uuid
  groupId       String              @db.Uuid
  active        Boolean             @default(false)
  role          MembershipRole      @default(MEMBER)
  status        MembershipStatus    @default(PENDING)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now())
  group         Group               @relation(fields: [groupId], references: [id])
  subscription  MemberSubscription?

  @@unique([memberId, groupId], name: "GroupMembership_memberId_groupId_key")
}

model GroupSubscription {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  groupId             String               @db.Uuid
  price               Float
  active              Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now())
  group               Group                @relation(fields: [groupId], references: [id])
  memberSubscriptions MemberSubscription[]

  @@unique([id, groupId], name: "GroupSubscription_id_groupId_key")
}

model MemberSubscription {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  groupSubscriptionId String                @db.Uuid
  groupMembershipId   String                @db.Uuid
  recurring           Boolean               @default(true)
  startDate           DateTime?
  endDate             DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now())
  groupSubscription   GroupSubscription     @relation(fields: [groupSubscriptionId], references: [id])
  groupMembership     GroupMembership       @relation(fields: [groupMembershipId], references: [id])
  invoices            SubscriptionInvoice[]

  @@unique([groupMembershipId, groupSubscriptionId], name: "MemberSubscription_groupMembershipId_groupSubscriptionId_key")
}

model SubscriptionInvoice {
  id              String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subscriptionId  String             @db.Uuid
  paidAmount      Float
  chargedAmount   Float
  paymentStatus   PaymentStatus?

  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @default(now())

  subscription    MemberSubscription @relation(fields: [subscriptionId], references: [id])
}

enum MembershipRole {
  MEMBER
  ADMIN
  TRADER
}

enum MembershipStatus {
  PENDING
  APPROVED
  DENIED
}

enum PayoutCurrency {
  BTC
  ETH
  LTC
}

enum PaymentStatus {
  PENDING
  APPROVED
}
