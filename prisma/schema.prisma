generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  /// This field's default value can currently not be parsed: `uuid_generate_v4()`.
  id                String                  @id @default(dbgenerated())
  name              String                  @unique
  description       String
  active            Boolean                 @default(true)
  telegram          String?
  discord           String?
  email             String?
  payoutAddress     String?
  payoutCurrency    PayoutCurrency          @default(BTC)
  payInPlatform     Boolean                 @default(false)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @default(now())
  members           GroupMembership[]
  membershipOptions GroupMembershipOption[]
}

model GroupMembership {
  /// This field's default value can currently not be parsed: `uuid_generate_v4()`.
  id        String           @id @default(dbgenerated())
  memberId  String
  groupId   String
  active    Boolean          @default(false)
  role      MembershipRole   @default(MEMBER)
  status    MembershipStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now())
  group     Group            @relation(fields: [groupId], references: [id])

  @@unique([memberId, groupId], name: "GroupMembership_memberId_groupId_key")
}

model GroupMembershipOption {
  /// This field's default value can currently not be parsed: `uuid_generate_v4()`.
  id               String   @id @default(dbgenerated())
  groupId          String
  membershipFee    Float
  membershipLength Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
  Group            Group    @relation(fields: [groupId], references: [id])
}

enum MembershipRole {
  MEMBER
  ADMIN
  TRADER
}

enum MembershipStatus {
  PENDING
  APPROVED
  DENIED
}

enum PayoutCurrency {
  BTC
  ETH
  LTC
}
