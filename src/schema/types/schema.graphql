scalar DateTime

extend type Query {
  # Group
  allGroups: [Group!]!
  group(input: GroupInput!): Group
  groupExists(input: GroupExistsInput!): Boolean!

  # GroupMembership
  membership(input: MembershipInput!): GroupMembership!
  myMembership(input: MyMembershipInput!): GroupMembership!
  myMemberships(input: MyMembershipsInput): [GroupMembership!]
  groupMembers(input: GroupMembersInput!): [GroupMembership!]
  membershipRequests(input: MembershipRequestsInput!): [GroupMembership!]
}

extend type Mutation {
  # Group
  createGroup(input: CreateGroupInput!): Group
  renameGroup(input: RenameGroupInput!): Group
  updateGroupDescription(input: UpdateGroupDescriptionInput!): Group
  disableGroup(input: DisableGroupInput!): Group

  # GroupMembership
  requestGroupAccess(input: RequestGroupAccessInput!): GroupMembership
  createMembership(input: CreateGroupMembershipInput!): CreateGroupMembershipResult
  updateMembershipRole(input: UpdateMembershipRoleInput!): GroupMembership
  updateMembershipStatus(input: UpdateMembershipStatusInput!): GroupMembership
  updateMembershipActive(input: UpdateMembershipActiveInput!): GroupMembership
  deleteMembership(input: DeleteMembershipInput!): DeleteMembershipResult

  # GroupSubscription
  createGroupSubscription(input: CreateGroupSubscriptionInput!): CreateGroupSubscriptionResult

  # MemberSubscription
  createMemberSubscription(input: CreateMemberSubscriptionInput!): CreateMemberSubscriptionResult
}

########################
#  Group
########################
type Group @key(fields: "id") {
  id: ID!
  name: String!
  active: Boolean!
  description: String!
  members(input: GroupMembersInput): GroupMembersResult
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CreateGroupInput {
  name: String!
  description: String!
  telegram: String
  discord: String
  email: String
  membershipFee: Float!
  payInPlatform: Boolean!
  payoutCurrency: String
  payoutAddress: String
}

input RenameGroupInput {
  groupId: ID!
  name: String!
}

input UpdateGroupDescriptionInput {
  groupId: ID!
  description: String!
}

input DisableGroupInput {
  groupId: ID!
}

input GroupInput {
  groupId: ID!
}

input GroupExistsInput {
  name: String!
}

input GroupMembersInput {
  limit: Int
  offset: Int
  roles: [MembershipRole!]
}

type GroupMembersResult {
  members: [GroupMembership!]!
  totalCount: Int!
}

########################
#  GroupMembership
########################
type GroupMembership @key(fields: "id") {
  id: ID!
  group: Group!
  member: User!
  active: Boolean!
  role: MembershipRole!
  status: MembershipStatus!
  subscription: MemberSubscription
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum MembershipStatus {
  APPROVED
  DENIED
  PENDING
}

enum MembershipRole {
  MEMBER
  TRADER
  ADMIN
}

input MembershipInput {
  membershipId: ID!
}

input MyMembershipInput {
  groupId: ID!
}

input MyMembershipsInput {
  roles: [MembershipRole!]
  statuses: [MembershipStatus!]
}

input RequestGroupAccessInput {
  groupId: ID!
}

input MembershipRequestsInput {
  groupId: ID!
}

input CreateGroupMembershipInput {
  groupId: ID!
  memberId: ID!
  role: MembershipRole!
  status: MembershipStatus!
}

type CreateGroupMembershipResult {
  success: Boolean!
  error: String
}

input UpdateMembershipRoleInput {
  membershipId: ID!
  role: MembershipRole!
}

input UpdateMembershipStatusInput {
  membershipId: ID!
  status: MembershipStatus!
}

input UpdateMembershipActiveInput {
  membershipId: ID!
  active: Boolean!
}

input DeleteMembershipInput {
  groupId: ID!
  membershipId: ID!
}

type DeleteMembershipResult {
  success: Boolean!
  error: String
}


########################
#  GroupSubscription
########################
type GroupSubscription @key(fields: "id") {
  id: ID!
  group: Group!
  active: Boolean!
  fee: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CreateGroupSubscriptionInput {
  groupId: ID!
  fee: Float!
}

type CreateGroupSubscriptionResult {
  success: Boolean!
  error: String
}

########################
#  MemberSubscription
########################
type MemberSubscription @key(fields: "id") {
  id: ID!
  active: Boolean!
  membership: GroupMembership!
  groupSubscription: GroupSubscription!
  outstandingBalance: Float!
  price: Float!
  recurring: Boolean!
  startDate: DateTime!
  endDate: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CreateMemberSubscriptionInput {
  membershipId: ID!
  groupSubscriptionId: ID!
}

type CreateMemberSubscriptionResult {
  success: Boolean!
  error: String
}


########################
#  User extension
########################
extend type User @key(fields: "id") {
  id: ID! @external
  memberships: [GroupMembership!]!
}

############################
#  ExchangeAccount extension
############################
extend type ExchangeAccount @key(fields: "id") {
  id: ID! @external
  membershipId: ID! @external
  membership: GroupMembership! @requires(fields: "membershipId")
}
