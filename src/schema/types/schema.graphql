extend type Query {
  allGroups: [Group!]!
  ownedGroups: [Group!]!
  group(groupId: ID!): Group
  groupAdmins(groupId: ID!): [GroupMembership!]
  groupTraders(groupId: ID!): [GroupMembership!]
  groupMembers(groupId: ID!): [GroupMembership!]
}

extend type Mutation {
  createGroup(data: CreateGroupInput!): Group
  updateGroup(data: UpdateGroupInput!): Group
  deleteGroup(groupId: ID!): Boolean

  createMembership(data: CreateGroupMembershipInput!): GroupMembership
  updateMembershipRole(data: UpdateMembershipRoleInput!): GroupMembership
  updateMembershipStatus(data: UpdateMembershipStatusInput!): GroupMembership
  updateMembershipActive(data: UpdateMembershipActiveInput!): GroupMembership
  deleteMembership(membershipId: ID!): Boolean
}

########################
#  User extension
########################
extend type User @key(fields: "id") {
  id: ID! @external
  memberships: [GroupMembership!]!
}

########################
#  Group
########################
type Group @key(fields: "id") {
  id: ID!
  name: String!
  memberships: [GroupMembership!]!
}

input CreateGroupInput {
  name: String!
  ownerId: ID!
}

input UpdateGroupInput {
  name: String!
}

########################
#  GroupMembership
########################
type GroupMembership @key(fields: "id") {
  id: ID!
  group: Group!
  member: User!
  active: Boolean!
  role: MembershipRole!
  status: MembershipStatus!
}

enum MembershipStatus {
  APPROVED
  DENIED
  PENDING
}

enum MembershipRole {
  MEMBER
  TRADER
  ADMIN
}

input CreateGroupMembershipInput {
  groupId: ID!
  memberId: ID!
  role: MembershipRole!
  status: MembershipStatus!
}

input UpdateMembershipStatusInput {
  membershipId: ID!
  status: MembershipStatus!
}

input UpdateMembershipRoleInput {
  membershipId: ID!
  role: MembershipRole!
}

input UpdateMembershipActiveInput {
  membershipId: ID!
  active: Boolean!
}
