scalar DateTime

extend type Query {
  # Group
  myGroup: Group
  allGroups: [Group!]!
  group(input: GroupInput!): Group
  groupExists(input: GroupExistsInput!): Boolean!

  # GroupMembership
  membership(input: MembershipInput!): GroupMembership!
  myMembership(input: MyMembershipInput!): GroupMembership!
  myMemberships(input: MyMembershipsInput): [GroupMembership!]
  groupMembers(input: GroupMembersInput!): [GroupMembership!]
  membershipRequests(input: MembershipRequestsInput!): [GroupMembership!]
}

extend type Mutation {
  # Group
  createGroup(input: CreateGroupInput!): Group
  renameGroup(input: RenameGroupInput!): Group
  updateGroupDescription(input: UpdateGroupDescriptionInput!): Group
  disableGroup(input: DisableGroupInput!): Group

  # GroupMembership
  requestGroupAccess(input: RequestGroupAccessInput!): GroupMembership
  createMembership(input: CreateGroupMembershipInput!): CreateGroupMembershipResult
  updateMembershipRole(input: UpdateMembershipRoleInput!): GroupMembership
  updateMembershipStatus(input: UpdateMembershipStatusInput!): GroupMembership
  updateMembershipActive(input: UpdateMembershipActiveInput!): GroupMembership
  deleteMembership(input: DeleteMembershipInput!): DeleteMembershipResult

  # GroupSubscription
  createGroupSubscription(input: CreateGroupSubscriptionInput!): CreateGroupSubscriptionResult
  updateGroupSubscription(input: UpdateGroupSubscriptionInput!): UpdateGroupSubscriptionResult
  deleteGroupSubscription(input: DeleteGroupSubscriptionInput!): DeleteGroupSubscriptionResult
  toggleSubscriptionActive(input: ToggleSubscriptionActiveInput!): ToggleSubscriptionActiveResult

  # MemberSubscription
  payMemberSubscription(input: PayMemberSubscriptionInput!): PayMemberSubscriptionResult
  cancelMemberSubscription(input: CancelMemberSubscriptionInput!): CancelMemberSubscriptionResult
  activateMemberSubscription(input: ActivateMemberSubscriptionInput!): ActivateMemberSubscriptionResult
}

########################
#  Group
########################
type Group @key(fields: "id") {
  id: ID!
  name: String!
  active: Boolean!
  description: String!
  members(input: GroupMembersInput): GroupMembersResult
  subscriptionOptions: [GroupSubscription!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CreateGroupInput {
  name: String!
  email: String
  discord: String
  telegram: String
  description: String!
  payoutAddress: String
  payInPlatform: Boolean!
  subscriptionOptions: [GroupSubscriptionInput!]!
}

input GroupSubscriptionInput {
  fee: Float!
  duration: Int!
  description: String
}

input RenameGroupInput {
  groupId: ID!
  name: String!
}

input UpdateGroupDescriptionInput {
  groupId: ID!
  description: String!
}

input DisableGroupInput {
  groupId: ID!
}

input GroupInput {
  groupId: ID!
}

input GroupExistsInput {
  name: String!
}

input GroupMembersInput {
  limit: Int
  offset: Int
  roles: [MembershipRole!]
  statuses: [MembershipStatus!]
}

type GroupMembersResult {
  members: [GroupMembership!]!
  totalCount: Int!
}

########################
#  GroupMembership
########################
type GroupMembership @key(fields: "id") {
  id: ID!
  group: Group!
  member: User!
  active: Boolean!
  role: MembershipRole!
  status: MembershipStatus!
  subscription: MemberSubscription
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum MembershipStatus {
  APPROVED
  DENIED
  PENDING
}

enum MembershipRole {
  MEMBER
  TRADER
  ADMIN
}

input MembershipInput {
  membershipId: ID!
}

input MyMembershipInput {
  groupId: ID!
}

input MyMembershipsInput {
  roles: [MembershipRole!]
  statuses: [MembershipStatus!]
}

input RequestGroupAccessInput {
  groupId: ID!
}

input MembershipRequestsInput {
  groupId: ID!
}

input CreateGroupMembershipInput {
  groupId: ID!
  memberId: ID!
  role: MembershipRole!
  status: MembershipStatus!
}

type CreateGroupMembershipResult {
  success: Boolean!
  error: String
}

input UpdateMembershipRoleInput {
  groupId: ID!
  membershipId: ID!
  role: MembershipRole!
}

input UpdateMembershipStatusInput {
  groupId: ID!
  membershipId: ID!
  status: MembershipStatus!
}

input UpdateMembershipActiveInput {
  active: Boolean!
  membershipId: ID!
}

input DeleteMembershipInput {
  groupId: ID!
  membershipId: ID!
}

type DeleteMembershipResult {
  success: Boolean!
  error: String
}


########################
#  GroupSubscription
########################
type GroupSubscription @key(fields: "id") {
  id: ID!
  group: Group!
  active: Boolean!
  price: Float!
  duration: Int!
  description: String
  memberCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CreateGroupSubscriptionInput {
  fee: Float!
  duration: Int!
  description: String
}

type CreateGroupSubscriptionResult {
  success: Boolean!
  error: String
}

input UpdateGroupSubscriptionInput {
  fee: Float!
  subscriptionId: ID!
  description: String
}

type UpdateGroupSubscriptionResult {
  success: Boolean!
  error: String
}

input DeleteGroupSubscriptionInput {
  subscriptionId: ID!
}

type DeleteGroupSubscriptionResult {
  success: Boolean!
  error: String
}

input ToggleSubscriptionActiveInput {
  subscriptionId: ID!
}

type ToggleSubscriptionActiveResult {
  success: Boolean!
  error: String
}


########################
#  MemberSubscription
########################
type MemberSubscription @key(fields: "id") {
  id: ID!
  active: Boolean!
  membership: GroupMembership!
  groupSubscription: GroupSubscription!
  currentPrice: Float
  recurring: Boolean!
  startDate: DateTime
  endDate: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  invoices: [SubscriptionInvoice!]!
}

input PayMemberSubscriptionInput {
  groupId: ID!
  membershipId: ID!
}

type PayMemberSubscriptionResult {
  invoiceId: String
  error: String
}

input ActivateMemberSubscriptionInput {
  subscriptionId: ID!
}

type ActivateMemberSubscriptionResult {
  success: Boolean!
  error: String
}

input CancelMemberSubscriptionInput {
  subscriptionId: ID!
}

type CancelMemberSubscriptionResult {
  success: Boolean!
  error: String
}

########################
#  SubscriptionInvoice
########################
type SubscriptionInvoice @key(fields: "id") {
  id: ID!
  email: String!
  amountPaid: Float!
  amountCharged: Float!
  status: InvoiceStatus!
  subscription: MemberSubscription!

  remoteId: ID
  token: ID

  periodStart: DateTime
  periodEnd: DateTime
  expiresAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum InvoiceStatus {
  NEW
  PAID
  CONFIRMED
  COMPLETE
  EXPIRED
  INVALID
}

########################
#  User extension
########################
extend type User @key(fields: "id") {
  id: ID! @external
  memberships: [GroupMembership!]!
}

############################
#  ExchangeAccount extension
############################
extend type ExchangeAccount @key(fields: "id") {
  id: ID! @external
  membershipId: ID! @external
  membership: GroupMembership! @requires(fields: "membershipId")
}
