extend type Query {
  # Group
  allGroups: [Group!]!
  group(input: GroupInput!): Group
  groupExists(input: GroupExistsInput!): Boolean!

  # GroupMembership
  myMemberships(input: MyMembershipsInput): [GroupMembership!]
  groupMembers(input: GroupMembersInput!): [GroupMembership!]
}

extend type Mutation {
  # Group
  createGroup(input: CreateGroupInput!): Group
  updateGroup(input: UpdateGroupInput!): Group
  disableGroup(input: DisableGroupInput!): Group

  # GroupMembership
  createMembership(input: CreateGroupMembershipInput!): GroupMembership
  updateMembershipRole(input: UpdateMembershipRoleInput!): GroupMembership
  updateMembershipStatus(input: UpdateMembershipStatusInput!): GroupMembership
  updateMembershipActive(input: UpdateMembershipActiveInput!): GroupMembership
  deleteMembership(input: DeleteMembershipInput!): GroupMembership
}

########################
#  User extension
########################
extend type User @key(fields: "id") {
  id: ID! @external
  memberships: [GroupMembership!]!
}

########################
#  Group
########################
type Group @key(fields: "id") {
  id: ID!
  name: String!
  active: Boolean!
  description: String!
  memberships: [GroupMembership!]!
}

input CreateGroupInput {
  name: String!
  description: String!
}

input UpdateGroupInput {
  groupId: ID!
  name: String!
  description: String!
}

input DisableGroupInput {
  groupId: ID!
}

input GroupInput {
  groupId: ID!
}

input GroupExistsInput {
  name: String!
}

########################
#  GroupMembership
########################
type GroupMembership @key(fields: "id") {
  id: ID!
  group: Group!
  member: User!
  active: Boolean!
  role: MembershipRole!
  status: MembershipStatus!
}

enum MembershipStatus {
  APPROVED
  DENIED
  PENDING
}

enum MembershipRole {
  MEMBER
  TRADER
  ADMIN
}

input MyMembershipsInput {
  roles: [MembershipRole!]
  statuses: [MembershipStatus!]
}

input GroupMembersInput {
  groupId: ID!
}

input CreateGroupMembershipInput {
  groupId: ID!
  memberId: ID!
  role: MembershipRole!
  status: MembershipStatus!
}

input UpdateMembershipRoleInput {
  membershipId: ID!
  role: MembershipRole!
}

input UpdateMembershipStatusInput {
  membershipId: ID!
  status: MembershipStatus!
}

input UpdateMembershipActiveInput {
  membershipId: ID!
  active: Boolean!
}

input DeleteMembershipInput {
  membershipId: ID!
}
